[{"content":"Welcome to inzt.com! This is my personal website and I hope you can get to know me better as you browse.\nIf you have any questions, please don\u0026rsquo;t hesitate to reach out to me.\nThanks and have an amazing day!\n-Anson\n","permalink":"https://www.inzt.com/posts/welcome/","summary":"\u003cp\u003eWelcome to inzt.com! This is my personal website and I hope you can get to know me better as you browse.\u003c/p\u003e\n\u003cp\u003eIf you have any questions, please don\u0026rsquo;t hesitate to \u003ca href=\"mailto:anson.sun@mail.utoronto.ca\"\u003ereach out to me\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks and have an amazing day!\u003c/p\u003e\n\u003cp\u003e-Anson\u003c/p\u003e","title":"Welcome!"},{"content":"Introduction NextPersona is a web application that enables its users to personalize their own digital “persona” and hold conversations with it natively. This application utilizes the large language model GPT-4 by OpenAI, enabling seamless and natural conversational exchanges in multiple languages.\nNextPersona is developed in Python, with inspiration from @avrabyt’s MemoryBot. Streamlit is chosen as the platform for frontend due to its easy-to-use GUI library and concise documentation. LangChain is utilized as the backend for this app for its capability of integrating multiple AI models, enabling the possibility of easy scaling and expansion in the future.\nFigure 1. NextPersona\u0026rsquo;s main page.\nCustomization and Configuration NextPersona offers users with in-depth configuration features that allows the “persona” to be customized according to the user’s preference. In a single session, configuration parameters can be changed on-the-fly as desired to fine-tune the response from the model.\nFigure 2. Config menu.\nIn Action During internal testing, NextPersona performed reasonably well in terms of responsiveness and intuitiveness. The average response time is around two to five seconds for moderate-to-long input strings, which simulates realistic human typing time in a causal conversation session.\nFigure 3. Screenshot from sample run.\nNext Steps The current state of this application is a technical preview of the capabilities of the GPT-4 model and the possibility of customizing “virtual friends” through adjustments in the system prompt sent using OpenAI’s API. NextPersona will receive regular updates that will include new features such as user accounts, long-term non-session-based data storage and retrieval, and much more.\nSource Code NextPersona is fully open source. The source code of this project can be accessed through GitHub here.\n","permalink":"https://www.inzt.com/projects/nextpersona/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://np.smoono.com/\"\u003eNextPersona\u003c/a\u003e is a web application that enables its users to personalize their own digital “persona” and hold conversations with it natively. This application utilizes the large language model GPT-4 by OpenAI, enabling seamless and natural conversational exchanges in multiple languages.\u003c/p\u003e\n\u003cp\u003eNextPersona is developed in Python, with inspiration from \u003ca href=\"https://github.com/avrabyt/MemoryBot\"\u003e@avrabyt’s MemoryBot\u003c/a\u003e. Streamlit is chosen as the platform for frontend due to its easy-to-use GUI library and concise documentation. LangChain is utilized as the backend for this app for its capability of integrating multiple AI models, enabling the possibility of easy scaling and expansion in the future.\u003c/p\u003e","title":"NextPersona"},{"content":"Overview The Automated Licence Plate Recognition System (ALPR) is a machine-learning application that can recognize the text on vehicle license plates, from a give sample of image or video. An rigorous approach was taken to develop, train and optimize the models needed for this task.\nSpecifically, YOLOv10 and YOLOv8 were adapted and customized to perform object recognition on licence plates. EasyOCR is adapted and trained to recognize and output plaintext from captured licence plates.\nSource Code This project is open source with its source code published on GitHub. You may access it here.\nDetailed Report To access the fully-detailed project report, please email me.\nTeam Acknowledgement This project is a collaborative effort by four team members, including myself. I would like to thank David Huang, Edward Liu and Chuhan Meng for their time and effort put into this project.\n","permalink":"https://www.inzt.com/projects/alpr-system/","summary":"\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe Automated Licence Plate Recognition System (ALPR) is a machine-learning application that can recognize the text on vehicle license plates, from a give sample of image or video. An rigorous approach was taken to develop, train and optimize the models needed for this task.\u003c/p\u003e\n\u003cp\u003eSpecifically, YOLOv10 and YOLOv8 were adapted and customized to perform object recognition on licence plates. EasyOCR is adapted and trained to recognize and output plaintext from captured licence plates.\u003c/p\u003e","title":"ALPR System"},{"content":" Education University of Toronto Bachelor of Applied Science in Computer Engineering + PEY Co-op\n2022 - Present\nNotable Courses\nECE241: Digital Systems ECE243: Computer Organization ECE297: Software Communication and Design APS360: Fundamentals of Deep Learning ECE344: Operating Systems ECE345: Algorithms and Data Structures Projects and Experience View the available collection on this website.\nSkills and Abilities Programming\nPython (including Streamlit and LangChain) Java JavaScript (including React, LangChain, Node.js, Next.js) TypeScript Swift Assembly (Nios II) Verilog (Intel Cyclone V) C C++ CSS HTML \u0026amp; XML Technical\nObject-Oriented Programming Machine Learning Frameworks \u0026amp; Libraries Optimization Algorithms FPGAs Debugging Non-Technical\nBilingual in English \u0026amp; Mandarin Team Leadership Communications Teamwork Problem Solving Attention to Detail ","permalink":"https://www.inzt.com/about/","summary":"\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/assets/Avatar_Resized.png\"/\u003e \n\u003c/figure\u003e\n\n\u003ch1 id=\"education\"\u003eEducation\u003c/h1\u003e\n\u003ch3 id=\"university-of-toronto\"\u003eUniversity of Toronto\u003c/h3\u003e\n\u003cp\u003eBachelor of Applied Science in Computer Engineering + PEY Co-op\u003cbr\u003e\n\u003cem\u003e2022 - Present\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNotable Courses\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eECE241: Digital Systems\u003c/li\u003e\n\u003cli\u003eECE243: Computer Organization\u003c/li\u003e\n\u003cli\u003eECE297: Software Communication and Design\u003c/li\u003e\n\u003cli\u003eAPS360: Fundamentals of Deep Learning\u003c/li\u003e\n\u003cli\u003eECE344: Operating Systems\u003c/li\u003e\n\u003cli\u003eECE345: Algorithms and Data Structures\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"projects-and-experience\"\u003eProjects and Experience\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"/projects\"\u003eView the available collection on this website.\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"skills-and-abilities\"\u003eSkills and Abilities\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eProgramming\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython (including Streamlit and LangChain)\u003c/li\u003e\n\u003cli\u003eJava\u003c/li\u003e\n\u003cli\u003eJavaScript (including React, LangChain, Node.js, Next.js)\u003c/li\u003e\n\u003cli\u003eTypeScript\u003c/li\u003e\n\u003cli\u003eSwift\u003c/li\u003e\n\u003cli\u003eAssembly (Nios II)\u003c/li\u003e\n\u003cli\u003eVerilog (Intel Cyclone V)\u003c/li\u003e\n\u003cli\u003eC\u003c/li\u003e\n\u003cli\u003eC++\u003c/li\u003e\n\u003cli\u003eCSS\u003c/li\u003e\n\u003cli\u003eHTML \u0026amp; XML\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTechnical\u003c/strong\u003e\u003c/p\u003e","title":"About Me"},{"content":"Introduction ScenicExplorer is an efficient mapping and navigation software that enables real-time interaction with all possible geographical data in OpenStreetMap format. Written in C++, it is smart, user-friendly, and ultimately, does its job right.\nThis application is developed as part of the design process for ECE297: Software Communication and Design, an rigorous course at the Department of Electrical and Computer Engineering, University of Toronto, in an industry-standard environment.\nFeatures Auto-Completion Searching for places can be a pain, especially when people just want to explore. Auto-completion removes the need for users to memorize every single place they intend to search up by bringing up suggestions instantly once the user starts typing into the search bar. Fast and responsive, the suggestions change dynamically as the input changes over time.\nFigure 1. Auto-completion in action.\nNavigation Navigation is important in life. Industry-standard pathfinding algorithms, including a customized A* algorithm, are used to implement an efficient and accurate navigation system in ScenicExplorer. With an convenient search bar with autocompletion, the user could search for and pinpoint any location in map and setup navigation easily.\nFigure 2. Navigation with route details highlighted in red.\nOne-Click Information Display Conveniently situated right below the search bar, info buttons can be clicked to display important information, including subway routes, restaurants and cafes, on-demand. Selections can be cleared effortlessly by utilizing the \u0026ldquo;Clear\u0026rdquo; button.\nFigure 3. One-click information buttons.\nWrapping Up This was a challenging piece of software to design and write, and I have gained a substantial amount of skills and experience going through the development process. There are a lot more to ScenicExplorer than what has been described above. Feel free to contact me if you\u0026rsquo;d like to learn more.\nI\u0026rsquo;m also grateful to have two outstanding team members to collaborate with along the way. I would like to thank Chiyuan Sun and Simona Liu for their time and effort put into creating ScenicExplorer.\nSource Code Due to university policy, the source code of ScenicExplorer generally needs to remain private. However, if source code is required for purposes such as employment screening, please email me.\n","permalink":"https://www.inzt.com/projects/scenic-explorer/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eScenicExplorer is an efficient mapping and navigation software that enables real-time interaction with all possible geographical data in OpenStreetMap format.\nWritten in C++, it is smart, user-friendly, and ultimately, does its job right.\u003c/p\u003e\n\u003cp\u003eThis application is developed as part of the design process for ECE297: Software Communication and Design, an rigorous course at the Department of Electrical and Computer Engineering, University of Toronto, in an industry-standard environment.\u003c/p\u003e\n\u003ch1 id=\"features\"\u003eFeatures\u003c/h1\u003e\n\u003ch2 id=\"auto-completion\"\u003eAuto-Completion\u003c/h2\u003e\n\u003cp\u003eSearching for places can be a pain, especially when people just want to explore. Auto-completion removes the need for users to memorize every single place they intend to search up by bringing up suggestions instantly once the user starts typing into the search bar. Fast and responsive, the suggestions change dynamically as the input changes over time.\u003c/p\u003e","title":"ScenicExplorer"}]